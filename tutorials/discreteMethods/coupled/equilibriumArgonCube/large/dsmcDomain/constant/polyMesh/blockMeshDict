/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0-MNF                             |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant/polyMesh";
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

// DSMC domain size in nm (2500 500 500) - 500nm gap in middle for MD domain

vertices
(   
    // Left zone
    (0 0 0) //0
    (1e-6 0 0) //1
    (1e-6 5e-7 0) //2
    (0 5e-7 0) //3
    (0 0 5e-7) //4
    (1e-6 0 5e-7) //5
    (1e-6 5e-7 5e-7) //6
    (0 5e-7 5e-7) //7   

    //Right zone
    (1.5e-6 0 0) //8
    (2.5e-6 0 0) //9
    (2.5e-6 5e-7 0) //10
    (1.5e-6 5e-7 0) //11
    (1.5e-6 0 5e-7) //12
    (2.5e-6 0 5e-7) //13
    (2.5e-6 5e-7 5e-7) //14
    (1.5e-6 5e-7 5e-7) //15  
);

blocks
(
    hex (0 1 2 3 4 5 6 7) dsmcZoneLeft (48 24 24) simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15) dsmcZoneRight (48 24 24) simpleGrading (1 1 1)  
);

boundary
(
    cyclicX_left
    {
        type cyclic;
        faces ((0 3 7 4));
        neighbourPatch cyclicX_right;
    }

    cyclicX_right
    {
        type cyclic;
        faces ((9 10 14 13));
        neighbourPatch cyclicX_left;
    }

    cyclicY_top_left
    {
        type cyclic;
        faces ((3 2 6 7));
        neighbourPatch cyclicY_bottom_left;
    }

    cyclicY_bottom_left
    {
        type cyclic;
        faces ((0 1 5 4));
        neighbourPatch cyclicY_top_left;
    }  

    cyclicY_top_right
    {
        type cyclic;
        faces ((11 10 14 15));
        neighbourPatch cyclicY_bottom_right;
    }

    cyclicY_bottom_right
    {
        type cyclic;
        faces ((8 9 13 12));
        neighbourPatch cyclicY_top_right;
    }    

    cyclicZ_front_left
    {
        type cyclic;
        faces ((0 1 2 3));
        neighbourPatch cyclicZ_back_left;
    }

    cyclicZ_back_left
    {
        type cyclic;
        faces ((4 5 6 7));
        neighbourPatch cyclicZ_front_left;
    }  

    cyclicZ_front_right
    {
        type cyclic;
        faces ((8 9 10 11));
        neighbourPatch cyclicZ_back_right;
    }

    cyclicZ_back_right
    {
        type cyclic;
        faces ((12 13 14 15));
        neighbourPatch cyclicZ_front_right;
    }

    coupling_left
    {
        type patch;
        faces ((1 2 6 5));
    }

    coupling_right
    {
        type patch;
        faces ((8 11 15 12));
    }
)

mergePatchPairs
(
);


// ************************************************************************* //
